<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="rental">

	<!-- 차량 예약 정보 저장 -->
<insert id="rental_in" parameterType="rental">
  INSERT INTO c_rental (cr_num, cr_mid, cr_cname, cr_rdate, cr_sdate, cr_edate, cr_price, cr_paytime)
VALUES (cr_seq.NEXTVAL, #{cr_mid}, #{cr_cname}, #{cr_rdate}, #{cr_sdate}, #{cr_edate}, #{cr_price},CURRENT_TIMESTAMP)
</insert>

	<!-- 방금 렌트신청한것 가져오기 --> <!-- cr_mid를 기준으로 검색하는데 그중 cr_num이 가장 높은 레코드를 찾아옴  -->
    <select id="get_rentCar" resultMap="RentalVOMap" parameterType="rental">
    	SELECT *FROM c_rental WHERE cr_mid = #{cr_mid} AND cr_num = (SELECT MAX(cr_num) FROM c_rental WHERE cr_mid = #{cr_mid})
	</select>
	
	<!-- 데이터베이스의 CR_PAYTIME과 RentalVO의 cr_paytime을 연결 데이터베이스의cr_paytime의 값이 vo파일의 cr_paytime으로 넘어감 -->
	<resultMap id="RentalVOMap" type="rental">
  		<result property="cr_paytime" column="CR_PAYTIME" javaType="java.time.LocalDateTime" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<!-- 해당 차 정보 가져오기 -->
	<select id="getCarInfo" resultType="car" parameterType="car">
	    SELECT * FROM c_car where c_name like #{c_name}
	</select>
	
    <!-- 해당 고객의 모든차량 렌트 내역 확인 -->
    <select id="get_rlist" resultType="rental" parameterType="rental">
    	select * from c_rental where cr_mid = #{cr_mid}
    </select>
    
    <!-- 렌트 비용을 렌탈정보 데이터베이스에 추가  (환불할때 용이)-->
    <update id="cost_in">
    	update c_rental set cr_price = #{cr_price} where cr_num = #{cr_num}
    </update>
    
    <!-- 주문번호를 렌탈정보 데이터베이스에 추가  (환불할때 용이)-->
    <update id="insertMerchantId">
    	update c_rental set cr_order = #{cr_order} where cr_num = #{cr_num}
    </update>
    
    <!-- 주문번호를 기준으로 해당 렌탈내역을 가져옴 -->
    <select id="getRentCar" resultType="rental">
    	select * from c_rental where cr_order = #{cr_order}
    </select>
    
    <!-- 모든 차량의 정보를 가져오기 -->
    <select id="findAllCar" resultType="car">
        SELECT * FROM c_car
    </select>
    
   	<!-- 차 리스트 가져오기 -->
	<select id="carList" resultType="car">
		select * from c_car
	</select>
	
	<!-- 차량코드번호를 기준으로 차량정보 가져오기 -->
	<select id="getCarInfo2" resultType="car">
		select * from c_car where c_num = #{c_num} 
	</select>
	
	<!-- 예약순을 기준으로 주문번호가 없으면 삭제시킴-->
	<delete id="delOrder">
		delete from c_rental where cr_num = #{cr_num}
	</delete>
	
	<!-- 예약된 차 이름으로 c_car테이블 c_ok 0으로 변경 -->
	<update id="update_cok">
		update c_car set c_ok = 0 where c_name = #{c_name}
	</update>
    
    <!-- 차량 중복 날짜 확인 쿼리문 --> <!-- 이 코드는 필요없을수도 있음 -->
    <select id="checkDate" resultType="int" parameterType="map">
		SELECT COUNT(*) 
		FROM c_rental 
		WHERE cr_cname = #{cr_cname} 
		AND (
		    cr_sdate BETWEEN #{cr_sdate, jdbcType=VARCHAR} AND #{cr_edate, jdbcType=VARCHAR}
		    OR 
		    cr_edate BETWEEN #{cr_sdate, jdbcType=VARCHAR} AND #{cr_edate, jdbcType=VARCHAR}
		    OR 
		    #{cr_sdate, jdbcType=VARCHAR} BETWEEN cr_sdate AND cr_edate
		    OR 
		    #{cr_edate, jdbcType=VARCHAR} BETWEEN cr_sdate AND cr_edate
		)
	</select>
	
	<!-- 렌탈테이블의 해당차량의 렌탈대여일자와 차량 정비 완료 시간을 가져오는 쿼리문 -->
	<select id="getDateCar" resultType="rental">
	    SELECT 
	        TO_CHAR(TO_DATE(cr_sdate, 'YYYY-MM-DD HH24:MI'), 'YYYY-MM-DD HH24:MI') AS cr_sdate, 
	        TO_CHAR(TO_DATE(cr_edate, 'YYYY-MM-DD HH24:MI'), 'YYYY-MM-DD HH24:MI') AS cr_edate,
	        TO_CHAR(TO_DATE(cr_waittime, 'YYYY-MM-DD HH24:MI'), 'YYYY-MM-DD HH24:MI') AS cr_waittime
	    FROM c_rental
	    WHERE cr_cname = #{cr_cname}
	</select>

	
	<!--주문번호를 기준으로 렌탈기간 초기화 -->
	<update id="reValueDate">
		UPDATE c_rental SET cr_sdate = '0001-01-01 01:01', cr_edate = '0001-01-01 01:01', cr_waitTime = '0001-01-01 01:01' WHERE cr_order = #{cr_order}
	</update>
	
	<!--주문번호를 기준으로 렌탈완료시 c_rental 테이블 status를 wait -> clear로 설정 -->
	<update id="rentalStatus">
		update c_rental set cr_status = 'clear' where cr_order = #{cr_order}
	</update>
	
    <!--5분안에 결제를 못하거나 안하고 취소를 하면 5분동안 해당차량 렌트 불가  -->
    <delete id="rentalDel">
    	DELETE FROM c_rental
			WHERE cr_status = 'wait' 
			AND EXTRACT(DAY FROM (SYSTIMESTAMP - cr_paytime)) * 24 * 60
			  + EXTRACT(HOUR FROM (SYSTIMESTAMP - cr_paytime)) * 60
			  + EXTRACT(MINUTE FROM (SYSTIMESTAMP - cr_paytime)) > 5
    </delete>
    
    <!--해당 아이디의 결제 중단 내역들을 전부 제거 -->
    <delete id="rentalDel2">
    DELETE FROM c_rental WHERE cr_mid = #{cr_mid} AND cr_status = 'wait'
    </delete>
    
    <!-- 차량 정비시간 설정 (반납시간의 +3시간) -->
    <update id="waitTime">
    	UPDATE c_rental SET cr_waittime = TO_CHAR(TO_TIMESTAMP(cr_edate, 'yyyy-mm-dd hh24:mi') + (3/24), 'yyyy-mm-dd hh24:mi') 
		WHERE cr_order = #{cr_order}
    </update>
    
    <!-- waitTime을 원래 반납시간과 똑같은 시간으로 지정 -->
    <update id="insertTime">
    	UPDATE c_rental SET cr_waittime = #{cr_waitTime} WHERE cr_order = #{cr_order}
    </update>
    
</mapper>